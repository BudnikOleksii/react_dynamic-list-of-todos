{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/FilterType.ts","components/TodoModal/TodoModal.tsx","decorator.ts","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodoId","selectTodo","className","map","todo","id","title","completed","userId","classNames","type","onClick","TodoFilter","filterType","onFilterChange","searchQuery","onChange","onAppliedChange","value","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","TodoModal","onClose","useState","user","setUser","isLoading","setIsLoading","useEffect","userFromServer","finally","href","email","name","App","setTodos","selectedTodo","setSelectedTodo","All","setFilterType","query","setQuery","appliedQuery","setAppliedQuery","todosFromServer","applyQuery","useCallback","f","timerId","clearTimeout","args","debounce","filteredTodos","useMemo","filter","checkQuery","toLowerCase","includes","Active","Completed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a74516c.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { Maybe } from '../../types/Maybe';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodoId: Maybe<number>;\n  selectTodo: (todoId: Maybe<Todo>) => void;\n}\n\nexport const TodoList: FC<Props> = ({ todos, selectedTodoId, selectTodo }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id, title, completed, userId,\n        } = todo;\n\n        return (\n          <tr\n            key={id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodoId === id,\n            })}\n          >\n            <td className=\"is-vcentered\">{userId}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={completed ? 'has-text-success' : 'has-text-danger'}>\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => selectTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={\n                      selectedTodoId !== id\n                        ? 'far fa-eye'\n                        : 'far fa-eye-slash'\n                    }\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ninterface Props {\n  filterType: FilterType;\n  onFilterChange: (type: FilterType) => void;\n  searchQuery: string;\n  onChange: (val: string) => void;\n  onAppliedChange: (val: string) => void;\n}\n\nexport const TodoFilter: FC<Props> = ({\n  filterType,\n  onFilterChange,\n  searchQuery,\n  onChange,\n  onAppliedChange,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={(event) => onFilterChange(event.target.value as FilterType)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={(event) => {\n          const { value } = event.target;\n\n          onChange(value);\n          onAppliedChange(value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onChange('');\n              onAppliedChange('');\n            }}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Maybe } from '../../types/Maybe';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  onClose: (id: Maybe<Todo>) => void;\n}\n\nexport const TodoModal: FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<Maybe<User>>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(userFromServer => setUser(userFromServer))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","export const debounce = (f: (query: string) => void, delay: number) => {\n  let timerId: number;\n\n  return (...args: string[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n","/* eslint-disable max-len */\nimport {\n  FC, useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './app.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { Maybe } from './types/Maybe';\nimport { FilterType } from './types/FilterType';\nimport { getTodos } from './api';\nimport { debounce } from './decorator';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Maybe<Todo>>(null);\n  const [filterType, setFilterType] = useState(FilterType.All);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 500), []);\n  const filteredTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const checkQuery = todo.title.toLowerCase().includes(query.toLowerCase());\n\n      switch (filterType) {\n        case FilterType.All:\n          return checkQuery;\n        case FilterType.Active:\n          return checkQuery && !todo.completed;\n        case FilterType.Completed:\n          return checkQuery && todo.completed;\n        default:\n          return true;\n      }\n    });\n  }, [todos, appliedQuery, filterType]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                onFilterChange={setFilterType}\n                searchQuery={query}\n                onChange={setQuery}\n                onAppliedChange={applyQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodoId={selectedTodo?.id || null}\n                  selectTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}